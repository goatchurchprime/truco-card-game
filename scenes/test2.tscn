[gd_scene load_steps=4 format=3 uid="uid://bln81fxflvoum"]

[ext_resource type="PackedScene" uid="uid://dow4o0jys17kh" path="res://scenes/card.tscn" id="1_m5ajs"]

[sub_resource type="Shader" id="Shader_5i7gt"]
code = "// Hey this is Hei! This shader \"fakes\" a 3D-camera perspective on CanvasItems.
// License: MIT

shader_type canvas_item;

// Camera FOV
uniform float fov : hint_range(1, 179) = 90;
uniform bool cull_back = true;
uniform float y_rot : hint_range(-180, 180) = 0.0;
uniform float x_rot : hint_range(-180, 180) = 0.0;
// At 0, the image retains its size when unrotated.
// At 1, the image is resized so that it can do a full
// rotation without clipping inside its rect.
uniform float inset : hint_range(0, 1) = 0.0;
// Consider changing this to a uniform and changing it from code

varying flat vec2 o;
varying vec3 p;

// const float PI = 3.14159;

// Creates rotation matrix
void vertex(){
	float sin_b = sin(y_rot / 180.0 * PI);
	float cos_b = cos(y_rot / 180.0 * PI);
	float sin_c = sin(x_rot / 180.0 * PI);
	float cos_c = cos(x_rot / 180.0 * PI);
	
	mat3 inv_rot_mat;
	inv_rot_mat[0][0] = cos_b;
	inv_rot_mat[0][1] = 0.0;
	inv_rot_mat[0][2] = -sin_b;
	
	inv_rot_mat[1][0] = sin_b * sin_c;
	inv_rot_mat[1][1] = cos_c;
	inv_rot_mat[1][2] = cos_b * sin_c;
	
	inv_rot_mat[2][0] = sin_b * cos_c;
	inv_rot_mat[2][1] = -sin_c;
	inv_rot_mat[2][2] = cos_b * cos_c;
	
	
	float t = tan(fov / 360.0 * PI);
	p = inv_rot_mat * vec3((UV - 0.5), 0.5 / t);
	float v = (0.5 / t) + 0.5;
	p.xy *= v * inv_rot_mat[2].z;
	o = v * inv_rot_mat[2].xy;

	VERTEX += (UV - 0.5) / TEXTURE_PIXEL_SIZE * t * (1.0 - inset);
}

void fragment(){
	if (cull_back && p.z <= 0.0) discard;
	vec2 uv = (p.xy / p.z).xy - o;
    COLOR = texture(TEXTURE, uv + 0.5);
	COLOR.a *= step(max(abs(uv.x), abs(uv.y)), 0.5);
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_wcbs0"]
shader = SubResource("Shader_5i7gt")
shader_parameter/fov = 55.009
shader_parameter/cull_back = true
shader_parameter/y_rot = -20.459
shader_parameter/x_rot = 40.0
shader_parameter/inset = 0.0

[node name="Node2D" type="Node2D"]

[node name="SubViewportContainer" type="SubViewportContainer" parent="."]
material = SubResource("ShaderMaterial_wcbs0")
offset_left = 194.0
offset_top = 96.0
offset_right = 326.0
offset_bottom = 322.0

[node name="SubViewport" type="SubViewport" parent="SubViewportContainer"]
disable_3d = true
handle_input_locally = false
size = Vector2i(132, 226)
render_target_update_mode = 4

[node name="Card" parent="SubViewportContainer/SubViewport" instance=ExtResource("1_m5ajs")]
position = Vector2(68.96, 113.615)
rank = 4
points = 7
suit = 2
